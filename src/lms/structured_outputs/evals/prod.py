from dataclasses import dataclass
from pydantic import BaseModel
from typing import Type, List, Optional
from src.lms.helpers import LLM
import asyncio


@dataclass
class StructuredOutputTest:
    model: str
    system_message: str
    user_message: str
    response_object: Type[BaseModel]
    content_for_correct_response: List[str]


async def test_parser(test: StructuredOutputTest, handler: str = "instructor"):
    # This is where the test will be run
    try:
        result = await LLM(test.model).async_respond(
            system_prompt=test.system_message,
            user_prompt=test.user_message,
            response_model=test.response_object,
            response_model_hander=handler,
        )
        succeeded = all(
            [
                content in str(result.dict())
                for content in test.content_for_correct_response
            ]
        )
        if succeeded:
            return True, result
        else:
            return (
                False,
                f"Response did not contain all expected content: {test.content_for_correct_response} not fully contained in {result.dict()}",
            )
    except Exception as e:
        return False, e


if __name__ == "__main__":
    arnold_system = """
# Premise
You are an expert accountant deciding which account and counterparty a bank transaction should be classified to.

## Client Company for Problem
### Client Company Name
Care2u
### Client Company Description
Care2U focuses on providing a patient-centered care experience. We meet patient needs in the comfort of their own home. This means earlier intervention during illness, lower emergency department utilization, and fewer days in the hospital. Care2U also offers convenient in-home rapid and PCR COVID-19 testing to residents of New York City and Long Island.
### Client Company Entity
Care2U Holdings LLC
### Client Company Related Entities
['Care365 Management LLC', 'Hello Pediatrics LLC', 'Hello Pediatrics Medical Group PLLC', 'Kim Medical of New York PLLC']
## Structure of Provided Information
* A description for the transaction automatically generated by the user's transaction processor
* AI-detected common bank terms present in the transaction description, along with their context
* The amount of the transaction
* The date of the transaction
- The results of a web search conducted by an intern in order to gather more context regarding the transaction record and/or parties involved. 
    * About 50% of the time, the web search will yield a relevant result. Use your best judgement to assess whether the result is relevant before using it.
    * This web search was obtained by entering the description into a search engine. If the result looks like it does not pertain to the transaction description, it is likely noise and should be ignored.
* A list of up to 8 candidate accounts and context on historical usage for candidate accounts
* A list of up to 8 candidate counterparties and context on historical usage for candidate counterparties

## Information About Relevant Data Generating Processes
To generate the description, banks and payment processors commonly use rule-based systems, decision trees, and Named Entity Recognition to generate transaction descriptions like "ATM Withdrawal at [Location]."
The description will commonly contain information about the counterparty, the specific goods or services provided (often named), and/or the method of payment. Use this information, together with the other info (especially the historical transactions), and carefully consider which parts of the description are which.

# Objective
Review all available evidence and think step by step to identify the most likely account and counterparty for the transaction. 

## Considerations and Best Practices for the Core Task
### Notes on Historical Transactions
* Historical examples can be helpful, but they are not an end-all-be-all. Evaluate the transaction information on its own merits as well.
* When looking at historical info, pay close attention to the description and amount fields provided for the historical rows to find the similar historical examples. 
    * Long transaction descriptions (15 characters plus) that very closely resemble the transaction (e.g. vary only in codes or numbers) are the strongest evidence possible.
* Observe that accounts may be associated with multiple broad types of transaction. If many historical transactions are provided for an account where some closely resemble the transaction in question while others do not, this account may still be a good choice.
* Weigh historical examples much less heavily if they are classified to catchall account such as 'Uncategorized Expenses'. 
* Pay very close attention to bank-generated keywords in the description, and weigh historical examples that share critical keywords heavily. 
* Use common sense when taking all information into account jointly. For instance, if an account seems to correspond to small transactions, but the transaction amount in question is extremely large, the transaction is less likely to be assigned to that account.

### Notes on Evaluating Transaction Information
* Many transactions include processors and intermediaries such as payment processors, platforms, and marketplaces. If the processor / intermediary is separate from the counterparty, keep them in mind when choosing an account, but do not include them in the counterparty name. 
* Counterparties are most often other businesses (LLC, Inc., etc.) or individuals.

### Notes on New and Split Accounts and Counterparties
#### Identifying the Counterparty
* If a counterparty is not included in historical transactions, you can create one. If you create a new counterparty, give a cleaned-up but descriptive counterparty name that follows standard capitalization and formatting, including any special capitalization, acronyms, and trademarks.
* Disentangle identifying the counterparty and assigning the counterparty. Some may prefer to omit counterparties for certain transactions. If there is a clear history of omitting counterparty for similar transactions it may be ok to omit it.
* Assign null for the counterparty if you decide to not label the transaction with a counterparty.
#### Handling Split Accounts and Counterparties
* Split Accounts: When a transaction is assigned to multiple accounts at once, it is assigned the label 'SPLIT' in lieu of a specific account. In order to decide whether an account is a split, consider the number and similarity of historical transactions provided, if any, that are assigned 'SPLIT'.
* Split Counterparties: When a transaction is assigned to multiple counterparties at once, it is assigned the label 'SPLIT' in lieu of a specific counterparty. 
* In order to decide whether a counterparty is a split, consider the number and similarity of historical transactions provided, if any, that are assigned 'SPLIT'. If the most similar historical transactions are split, you should consider the possibility that the counterparty is split as well.
#### Restrictions and Edge Cases
* If you cannot detect a counterparty or decide to not label the transaction with a counterparty, return counterparty as null. Do not use the word "None" in your response.
* You may not propose a new account.
"""
    arnold_user = """

# Provided transaction description
ACCOUNT TRANSFER TRSF TO 483084163098
# Provided transaction amount
-3000000.0
# Provided transaction date
2024-04-10
# Web search result snippet
The transaction description "ACCOUNT TRANSFER TRSF TO 483084163098" likely refers to a funds transfer to the account number 483084163098. The term "TRANSFER" indicates a movement of funds between bank accounts, while "ACCOUNT" suggests that this transfer is directed towards a specific account. The account number does not provide any clear indication of the counterparty's identity.
# Confidence in web search result relevance
ConfidenceLevel.MEDIUM
# Account and counterparty candidates and historical usage
## Account candidates
['Member Contributions', 'Investments']
## Counterparty candidates
[]
## Historical usage with candidate accounts
| description | amount | datetime | account | counterparty |
|---|---|---|---|---|
| ACCOUNT TRANSFER TRSF TO 483084200980 | -450000.0 | 2023-08-28 | Investments | None |
| ACCOUNT TRANSFER TRSF TO 483084200977 | -100000.0 | 2024-02-05 | Investments | None |
| ACCOUNT TRANSFER TRSF TO 483084200980 | -100000.0 | 2024-02-05 | Investments | None |
| ACCOUNT TRANSFER TRSF TO 483084200977 | -100000.0 | 2024-01-29 | Investments | None |
| ACCOUNT TRANSFER TRSF TO 483084200980 | -100000.0 | 2024-01-29 | Investments | None |
| ACCOUNT TRANSFER TRSF TO 483084163098 | -1300000.0 | 2023-09-26 | Member Contributions | None |
| ACCOUNT TRANSFER TRSF TO 483084163098 | -765833.13 | 2024-02-12 | Member Contributions | None |
## Historical usage with candidate counterparties
None
"""

    class ArnoldPredictionResponse(BaseModel):
        account: str
        counterparty: Optional[str]

    arnold_test = StructuredOutputTest(
        system_message=arnold_system,
        user_message=arnold_user,
        model="gpt-4-32k",
        response_object=ArnoldPredictionResponse,
        content_for_correct_response=["Member Contributions"],
    )

    regina_system = """
# Premise
You will be given an explanation of a workflow completed by an AI working for an accounting firm on a specific client of the accounting firm's. You will also be provided with the workflow output. 
The workflow explanation was produced for use by language models and may be confusing or difficult to understand for humans.

# Objective
Your task is to convey the information contained within the explanation to the human accounting team.

Please make the process flow diagram and the breakdown of if/what went wrong accountant-friendly.

Include the following desiderata:
- Be specific about the values of other parameters used, except for accounting book, accounting book ID, client, and client ID
- Do not mention accounting book, accounting book ID, client, client ID. The accounting team will assume the process flow is already specific to a client
- Be specific about the values of other parameters used
- Phrase any downloading of reports as "pulling reports from the ledger"
- Do not refer to back-end logic or details (file systems, databases, etc.)
- Phrase any creation or manipulation of a data frame or table as creation or manipulation a "CSV"
- Do not include data transformation logic such as the names of various tables or columns
- Phrase any use of Python code, packages, or function in terms of what the logic of the code but without reference to the code itself or any packages or functions used
- Do not include the content of output itself in your response 
- Make the process easier to follow by explaining step by step
- Ensure you do not explain the process abstractly, but rather how the inputs were processed by the control flow to produce the final output
- Explain any logic clearly
- Do not use fluff language. Ensure you always refer to concrete, specific details
- Use markdown with headers and bullet points to make the explanation clear and easy to follow
- Use a numbered list with brief headers for each item, when possible

# Constraints
Present your explanation in two components: 
1. What happened
2. What, if anything, went wrong in this particular run
    - If nothing went wrong, include only 'No errors detected' in this section. Never discuss hypothetical errors that could have occurred.
"""
    regina_user = """
# Information for this Run
- Parameters: [TemplateParameterInput(parameter='task_procedure', value='Task Goal: Identify Counterparties booked to multiple expense accounts. \n1. Filter the accounts report for expense accounts.\n2Filter the General Ledger for the period and expense accounts.\n3Group counterparties by expense accounts, and identify counterparties booked to multiple expense accounts'), TemplateParameterInput(parameter='output_and_action_instructions', value='\nScenario: Vendors booked to multiple expense accounts exist. \nOutput: List the Expense Accounts. \nAction: Reclassify any incorrectly categorized vendor transactions using the output files as a guide\n\nScenario: Vendors were not booked to multiple expense accounts. \nAction: No Action Needed\n'), TemplateParameterInput(parameter='formatting_instructions', value='List any vendors in bullet point form'), TemplateParameterInput(parameter='custom_instructions', value=''), TemplateParameterInput(parameter='client', value=UUID('24091b06-eebb-4e12-b3e9-9e88c5b97777')), TemplateParameterInput(parameter='accounting_book', value=UUID('e014244a-ef56-48a3-9136-1dacb33b4ddc')), TemplateParameterInput(parameter='start_date', value=datetime.datetime(2024, 5, 1, 0, 0)), TemplateParameterInput(parameter='end_date', value=datetime.datetime(2024, 5, 31, 0, 0))]
- Output Metadata: {'collateral': [TemplateOutput(node_id='find_vendor_transactions_in_report', output_field='transformed_dataframe', name='Vendor Transactions', description='Vendor Transactions for Vendors booked to multiple Expense Accounts')], 'result_brief': TemplateOutput(node_id='llm_analysis', output_field='response_brief', name=None, description=None), 'proposed_action': TemplateOutput(node_id='llm_analysis', output_field='proposed_action', name=None, description=None), 'result_expanded': TemplateOutput(node_id='llm_analysis', output_field='response_expanded', name=None, description=None)}
- Result: Upon application of the task procedures on the available data, we found that there are no vendors booked to multiple expense accounts.

# Process Information
The process begins with downloading the accounting book report from Wasabi cloud storage, ensuring a successful connection and handling any errors that may occur during the download. Following this, the expense accounts are transformed, though the specific actions in this step are not detailed. The General Ledger Report is then filtered for a specified period, producing a filtered report. This filtered report, along with the transformed expense accounts data, is used to find expenses in the report with accounts, selecting the correct columns for further analysis. The process continues with the identification of vendors and the transformation of data to find vendor transactions in the report, focusing on those booked to multiple expense accounts. Finally, an analysis is conducted on the vendors booked to multiple accounts, generating insights, summaries, and interpreted data for further action.

# Explanation for AI
# Explanation
The process begins with the downloading of the accounting book report from Wasabi cloud storage. Once the report is successfully downloaded, it is then transformed to focus on expense accounts. The transformed data is then filtered for a specific period, which in this case is from May 1, 2024, to May 31, 2024. 

The filtered data is then further processed to find expenses in the report with accounts. This involves transforming the DataFrame to select the appropriate columns. The transformed DataFrame is then used to identify vendors. 

Once the vendors are identified, the process then looks for vendor transactions in the report. This involves another transformation of the DataFrame, this time focusing on vendor transactions. 

Finally, the process conducts an analysis to identify vendors booked to multiple accounts. The analysis generates insights or summaries based on the transformed data. In this case, the analysis found that there are no vendors booked to multiple expense accounts.

# Possible Output Issues
No errors detected. The process appears to have run correctly, and the final output is valid. The process correctly identified that there are no vendors booked to multiple expense accounts.
"""

    class ReginaPredictionResponse(BaseModel):
        description: str
        output_information_issues: str

    print("Evaluating on Arnold's test...")
    instructor_success = asyncio.run(test_parser(arnold_test, handler="instructor"))
    print(instructor_success)
    json_success = asyncio.run(test_parser(arnold_test, handler="json"))
    print(json_success)
    pydantic_success = asyncio.run(test_parser(arnold_test, handler="pydantic"))
    print(pydantic_success)
    mirascope_success = asyncio.run(test_parser(arnold_test, handler="mirascope"))
    print(mirascope_success)

    print("Evaluating on Regina's test...")
    regina_test = StructuredOutputTest(
        system_message=regina_system,
        user_message=regina_user,
        model="gpt-4-turbo",
        response_object=ReginaPredictionResponse,
        content_for_correct_response=["**"],
    )
    instructor_success = asyncio.run(test_parser(regina_test, handler="instructor"))
    print(instructor_success)
    json_success = asyncio.run(test_parser(regina_test, handler="json"))
    print(json_success)
    pydantic_success = asyncio.run(test_parser(regina_test, handler="pydantic"))
    print(pydantic_success)
    mirascope_success = asyncio.run(test_parser(regina_test, handler="mirascope"))
    print(mirascope_success)
    pass
